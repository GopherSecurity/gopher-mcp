use std::env;
use std::path::PathBuf;

fn main() {
    // Generate C headers for Rust types
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let package_name = env::var("CARGO_PKG_NAME").unwrap();
    let output_file = target_dir()
        .join("include")
        .join(format!("{}_bindings.h", package_name.replace("-", "_")));

    // Create include directory
    std::fs::create_dir_all(output_file.parent().unwrap()).unwrap();

    // Generate bindings
    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_language(cbindgen::Language::C)
        .with_include_guard("MCP_FILTER_SDK_BINDINGS_H")
        .with_autogen_warning("/* Generated by cbindgen. Do not modify manually. */")
        .with_pragma_once(true)
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(&output_file);

    // Tell Cargo to rerun this build script if the crate changes
    println!("cargo:rerun-if-changed=src/");
    println!("cargo:rerun-if-changed=Cargo.toml");

    // Tell Cargo where to find the generated header
    println!("cargo:include={}", output_file.parent().unwrap().display());
}

fn target_dir() -> PathBuf {
    if let Ok(target) = env::var("CARGO_TARGET_DIR") {
        PathBuf::from(target)
    } else {
        PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap()).join("target")
    }
}
